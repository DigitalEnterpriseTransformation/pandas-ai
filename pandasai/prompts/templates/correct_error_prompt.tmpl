{% for df in context.dfs %}{% set index = loop.index %}{% include 'shared/dataframe.tmpl' with context %}{% endfor %}

### The user asked the following question:
{{context.memory.get_conversation()}}

### You generated this python code:
{{code}}

### It fails with the following error:
{{error}}

### Additional Functions Reminder
{% if context.skills_manager.has_skills() %}
{{context.skills_manager.prompt_display()}}
{% endif %}

### Task description Reminder
Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: {% include 'shared/output_type_template.tmpl' with context %}
```

### Final Instructions Reminder
1. Variable `dfs: list[pd.DataFrame]` is already declared, please directly use it. Note that you may need to use more than one dataframe from this list.

2. At the end, declare "result" variable as a dictionary of type, value, note (explanations on your approach and how to understand the results) and data if plotting a chart.

3. Any kind of data you include inside the "result" variable should be a single dataframe, if you have more info to output, try to merge all of them into a single dataframe.

{% if viz_lib %}
4. If you are asked to plot a chart, use "{{viz_lib}}" for charts, save as png.

{% endif %}
5. When plotting, please do not set a fix size of the image such as using `plt.figure(figsize=(10, 8))`, you should use some variable such as dataframe's row number for reference to find the suitable size, e.g. plt.figure(figsize=(len(df) * 1.5, 8))

6. During filtering or string matching in dataframes,
    - If the matching keyword is simple and need to be very exact such as person name, order number, use exact match
        - For example: df[df['销售人员'] == '张三']
    - If the you think user's keyword can be slightly simplified, use `str.contains()` for substring filtering / matching in a pandas DataFrame. Use `case=False` for case-insensitive matching. Do not use `==` for string comparisons.
        - For example: Instead of `df[df['所在城市'] == '上海']`, use `df[df['所在城市'].str.contains('上海', case=False, na=False)]`
    - For complex terms that substring matching or exact matching won't work. Use `get_best_matching_string` for fuzzy matching especitally in the case of company names.
        - For example: get_best_matching_string(orders_df['母公司名称'], '上海一汽') >>> '一汽（上海）有限公司'
7. Be extra careful about the columns and their values you want to perform merging on, make sure the columns' values you are performing merging on are what you expected or you will get all nan values if they are not compatible.

8. The texts in chart plotted and notes should be in the same language as the user's query.

### Your turn
Fix the python code above and return the new python code: