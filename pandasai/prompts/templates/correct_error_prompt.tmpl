{% for df in context.dfs %}{% set index = loop.index %}{% include 'shared/dataframe.tmpl' with context %}{% endfor %}

### The user asked the following question:
{{context.memory.get_conversation()}}

### You generated this python code:
{{code}}

### It fails with the following error:
{{error}}

### Additional Functions Reminder
{% if context.skills_manager.has_skills() %}
{{context.skills_manager.prompt_display()}}
{% endif %}

### Task description Reminder
Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: {% include 'shared/output_type_template.tmpl' with context %}
```

### Final Instructions Reminder
1. Variable `dfs: list[pd.DataFrame]` is already declared, please directly use it. Note that you may need to use more than one dataframe from this list.

2. At the end, declare "result" variable as a dictionary of type, value, note (explanations on your approach and how to understand the results) and data if plotting a chart.

3. Any kind of data you include inside the "result" variable should be a single dataframe, if you have more info to output, try to merge all of them into a single dataframe.

{% if viz_lib %}
4. If you are asked to plot a chart, use "{{viz_lib}}" for charts, save as png.

{% endif %}
5. When plotting, please do not set a fix size of the image such as using `plt.figure(figsize=(10, 8))`, you should use some variable such as dataframe's row number for reference to find the suitable size, e.g. plt.figure(figsize=(len(df) * 1.5, 8))

6. Always use `str.contains()` for filtering string values in a pandas DataFrame. Use `case=False` for case-insensitive matching. Do not use `==` for string comparisons.
    - For example: Instead of `hlaptop_sales = df[df['product'] == 'laptop']`, use `laptop_sales = df[df['product'].str.contains('laptop', case=False, na=False)]`

7. In addition, when filtering based on a substring, ensure the term is specific enough to avoid unintended matches but at the same informative enough that do not lose any specific identifiers
    - For example: Instead of filtering using `df[df['公司名称'].str.contains('苏州润晶高纯化工科技股份有限公司')] where "股份有限公司" can be a very general term, 
                   or using `df[df['公司名称'].str.contains('润晶高纯化工科技')] which loses the information about '苏州', 
                   **use `df[df['公司名称'].str.contains('苏州润晶高纯化工科技', case=False, na=False)]` to get the best outcome.**

### The Must-Follow Instruction
For privacy purpose, when plotting a chart or inside the result var, you should never use any company name directly from the dataframe column such as '公司名称' and '客户名称', you should always use the company name from the column '脱敏公司名称'.

### Your turn
Fix the python code above and return the new python code: